name: Demo build pipelines

on:
  push:
    branches:
      - main

jobs:
  build_docker:
    name: Build docker image

    permissions:
      contents: read
      packages: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get the image name
        id: image_name
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=edge
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=sha,format=long

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          # platforms: linux/amd64,linux/arm64
          push: true
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Vulnerability scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          output: "trivy.txt"
          ignore-unfixed: true

      - name: Publish Trivy Output to Summary
        run: |
          if [[ -s trivy.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```terraform'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

  deploy_dev:
    name: Deploy to DEV

    needs: build_docker

    # runs-on:
    #   labels: [ "self-hosted", "Linux", "X64", "sdc", "dev" ]
    runs-on: ubuntu-latest

    environment:
      name: dev
      url: http://my-demo.training99/

    steps:
      - name: lowercase github.repository
        run: |
          echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Checkout repository
        uses: actions/checkout@v4

      # # https://github.com/Azure/setup-helm
      # - name: Helm tool installer
      #   uses: Azure/setup-helm@v4
      #   # with:
      #   #   version: "3.14.0" # default is latest (stable)
      #   #   token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'

      # https://github.com/Azure/setup-kubectl
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v4
        # with:
        #   version: "v1.26.8" # default is latest stable

      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v4
        with:
          method: service-account
          k8s-url: ${{ vars.K8S_URL }}
          k8s-secret: ${{ secrets.K8S_SECRET }}

      # - name: Create secret in Kubernetes cluster
      #   id: create-k8s-secret
      #   uses: Azure/k8s-create-secret@v5
      #   with:
      #     namespace: ${{ vars.K8S_NS }}
      #     container-registry-url: ghcr.io
      #     container-registry-username: githut-actions
      #     container-registry-password: ${{ secrets.READ_PACKAGES_PAT }}
      #     secret-name: regcred

      - name: Replace placeholder in deployment manifest
        run: |
          sed -i "s|DEPLOYMENT_IMAGE|${{ env.IMAGE_NAME }}|g" manifests/deployment.yaml

      - name: Deploy to Kubernetes
        id: deploy-k8s
        uses: Azure/k8s-deploy@v5
        with:
          action: deploy
          manifests: |
            manifests/deployment.yaml
            manifests/service.yaml
            manifests/ingress.yaml
          namespace: ${{ vars.K8S_NS }}
          images: |
            ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          # imagepullsecrets: regcred
